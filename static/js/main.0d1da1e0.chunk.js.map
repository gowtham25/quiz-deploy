{"version":3,"sources":["constants.ts","components/Home/Home.tsx","components/Result/Result.tsx","components/QuestionList/QuestionList.tsx","components/QuizHistory/QuizHistory.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CATEGORY_TYPE","label","value","DIFFICULTY","HomeContainer","styled","div","validate","val","errors","amount","isNaN","Home","handleStartQuiz","setShowHistory","className","onClick","initialValues","category","difficulty","onSubmit","values","actions","filterJson","Object","keys","map","type","name","as","data","key","ResultContainer","Result","allQuestions","useState","correctAnswer","setCorrectAnswer","useEffect","answer","filter","aVal","correct_answer","selectedAnswer","length","history","localStorage","getItem","percent","parseJson","JSON","parse","date","getTodayDate","totalQuestions","correct","inCorrect","setItem","stringify","stringJson","today","Date","String","getDate","padStart","getMonth","getFullYear","QuestionListContainer","QuestionList","handleRestart","quizQuestions","handleClickHome","currentQuestionNo","setCurrentQuestionNo","currentQuestion","setCurrentQuestion","setAllQuestions","isSubmit","setIsSubmit","allOptionJson","qVal","index","incorrect_answers","allAns","randomValue","Math","floor","random","splice","allOptions","handleChangeQuestion","num","question","rVal","setAnswer","handleSelectAnswer","checked","id","htmlFor","DOMParser","parseFromString","body","innerHTML","QuizHistoryContainer","QuizHistory","historyData","setHistoryData","parseHistory","hVal","time","colSpan","AppContainer","App","setQuizQuestions","showHistory","loading","setLoading","currentConfiguration","setCurrentConfiguration","axios","get","obj2QueryString","then","res","results","addedKey","obj","str","k","push","encodeURIComponent","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qSAAaA,EAAgB,CAC3B,CAAEC,MAAO,eAAgBC,MAAO,IAChC,CAAED,MAAO,oBAAqBC,MAAO,KACrC,CAAED,MAAO,uBAAwBC,MAAO,MACxC,CAAED,MAAO,sBAAuBC,MAAO,MACvC,CAAED,MAAO,uBAAwBC,MAAO,MACxC,CAAED,MAAO,qCAAsCC,MAAO,MACtD,CAAED,MAAO,4BAA6BC,MAAO,MAC7C,CAAED,MAAO,6BAA8BC,MAAO,MAC9C,CAAED,MAAO,6BAA8BC,MAAO,MAC9C,CAAED,MAAO,mBAAoBC,MAAO,MACpC,CAAED,MAAO,qBAAsBC,MAAO,MACtC,CAAED,MAAO,uBAAwBC,MAAO,MACxC,CAAED,MAAO,YAAaC,MAAO,MAC7B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,YAAaC,MAAO,MAC7B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,WAAYC,MAAO,MAC5B,CAAED,MAAO,MAAOC,MAAO,MACvB,CAAED,MAAO,cAAeC,MAAO,MAC/B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,WAAYC,MAAO,MAC5B,CAAED,MAAO,wBAAyBC,MAAO,MACzC,CAAED,MAAO,mBAAoBC,MAAO,MACpC,CAAED,MAAO,wCAAyCC,MAAO,MACzD,CAAED,MAAO,sCAAuCC,MAAO,OAG5CC,EAAa,CACxB,CAAEF,MAAO,iBAAkBC,MAAO,IAClC,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,OAAQC,MAAO,S,2kGC1B1B,IAAME,EAAgBC,IAAOC,IAAV,KAmHbC,EAAW,SAACC,GACd,IAAMC,EAAc,GAIpB,OAHKD,EAAIE,SAAQD,EAAOC,OAAS,YAC7BF,EAAIE,QAAU,IAAGD,EAAOC,OAAS,qCACjCC,MAAMH,EAAIE,UAASD,EAAOC,OAAS,gCAChCD,GAoEIG,EA7DoB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,eACnD,OACI,kBAACV,EAAD,KACI,yBAAKW,UAAU,qBACX,4BAAQA,UAAU,UAAUC,QAAS,WAAQF,GAAe,KAA5D,iBAEJ,kBAAC,IAAD,CACIG,cAAe,CAAEC,SAAU,GAAIC,WAAY,GAAIT,OAAQ,IACvDH,SAAUA,EACVa,SAAU,SAACC,EAAaC,GACpB,IAAMC,EAAU,eAAQF,GACxBG,OAAOC,KAAKJ,GAAQK,KAAI,SAAClB,GAGrB,OAFKe,EAAWf,WACLe,EAAWf,GACfA,KAEXK,EAAgBU,MAGnB,cAAGd,OAAH,OACG,kBAAC,IAAD,KACI,yBAAKM,UAAU,YACX,wDACA,kBAAC,IAAD,CAAOY,KAAK,SAASC,KAAK,WAC1B,kBAAC,IAAD,CAAcA,KAAK,YAEvB,yBAAKb,UAAU,YACX,mDAAwB,6CACxB,kBAAC,IAAD,CAAOc,GAAG,SAASD,KAAK,YACnB5B,EAAc0B,KAAI,SAACI,GAAU,IAAD,EACAA,GAAQ,GAAzB7B,EADiB,EACjBA,MAAOC,EADU,EACVA,MACf,OAAO,4BAAQ6B,IAAK7B,EAAOA,MAAOA,GAAQD,QAItD,yBAAKc,UAAU,YACX,qDAA0B,6CAC1B,kBAAC,IAAD,CAAOc,GAAG,SAASD,KAAK,cACnBzB,EAAWuB,KAAI,SAACI,GAAU,IAAD,EACGA,GAAQ,GAAzB7B,EADc,EACdA,MAAOC,EADO,EACPA,MACf,OAAO,4BAAQ6B,IAAK7B,EAAOA,MAAOA,GAAQD,QAatD,4BAAQ0B,KAAK,UAAb,oB,kXCtLxB,IAAMK,EAAkB3B,IAAOC,IAAV,KA2EN2B,EAxDwB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACfC,mBAAiB,GADF,mBAClDC,EADkD,KACnCC,EADmC,KAEzDC,qBAAU,WACN,IAAMC,EAASL,EAAaM,QAAO,SAACC,GAAe,IAAD,EACHA,GAAQ,GACnD,OAF8C,EACtCC,iBADsC,EACtBC,kBAG5BN,EAAiBE,EAAOK,QACxB,IAAIC,EAAUC,aAAaC,QAAQ,eAC7BC,EAAWT,EAAOK,OAASV,EAAaU,OAAU,IACxD,GAAIC,EAAS,CACT,IAAII,EAAYC,KAAKC,MAAMN,GAC3BI,EAAS,sBAAOA,GAAP,CAAkB,CACvBG,KAAMC,IACNC,eAAgBpB,EAAaU,OAC7BW,QAAShB,EAAOK,OAChBY,UAAWtB,EAAaU,OAASL,EAAOK,OACxCI,aAEJF,aAAaW,QAAQ,cAAeP,KAAKQ,UAAUT,QAChD,CACH,IAAMU,EAAa,CAAC,CAChBP,KAAMC,IACNC,eAAgBpB,EAAaU,OAC7BW,QAAShB,EAAOK,OAChBY,UAAWtB,EAAaU,OAASL,EAAOK,OACxCI,YAEJF,aAAaW,QAAQ,cAAeP,KAAKQ,UAAUC,OAExD,CAACzB,IAEJ,IAAMmB,EAAe,WACjB,IAAIO,EAAQ,IAAIC,KAKhB,OAJSC,OAAOF,EAAMG,WAAWC,SAAS,EAAG,KAIjC,IAHHF,OAAOF,EAAMK,WAAa,GAAGD,SAAS,EAAG,KAG3B,IAFZJ,EAAMM,eAIrB,OACI,kBAAClC,EAAD,KACI,sCACA,yBAAKjB,UAAU,oBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aAAf,oBAAiD,yBAAKA,UAAU,aAAaqB,IAEjF,yBAAKrB,UAAU,OACX,yBAAKA,UAAU,aAAf,sBAAmD,yBAAKA,UAAU,aAAamB,EAAaU,OAASR,KAG7G,yBAAKrB,UAAU,WAAYqB,EAAgBF,EAAaU,OAAU,IAAlE,gC,oqKCrEZ,IAAMuB,EAAwB9D,IAAOC,IAAV,KA8OZ8D,EArEqC,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,cAAeC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBAAsB,EACrDpC,mBAAiB,GADoC,mBAChGqC,EADgG,KAC7EC,EAD6E,OAEzDtC,qBAFyD,mBAEhGuC,EAFgG,KAE/EC,EAF+E,OAG/DxC,mBAAc,IAHiD,mBAGhGD,EAHgG,KAGlF0C,EAHkF,OAIvEzC,oBAAkB,GAJqD,mBAIhG0C,EAJgG,KAItFC,EAJsF,KAMvGxC,qBAAU,WACN,GAAIgC,GAAiBA,EAAc1B,OAAQ,CACvC,IAAMmC,EAAgBT,EAAc5C,KAAI,SAACsD,EAAMC,GAAW,IAAD,EACFD,GAAQ,GADN,IAC7CE,yBAD6C,MACzB,GADyB,EACrBxC,EADqB,EACrBA,eAC1ByC,EAAM,YAAOD,GACbE,EAAcC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAOvC,OAAS,EAAI,IAAM,EAE1E,OADAuC,EAAOK,OAAOJ,EAAa,EAAG1C,GACvB,eAAKsC,EAAZ,CAAkBS,WAAYN,OAElCP,EAAgBG,GAChBJ,EAAmBI,EAAc,OAEtC,CAACT,IAEJ,IAAMoB,EAAuB,SAACC,GAC1BlB,EAAqBkB,GACrBhB,EAAmBzC,EAAayD,KAtBmE,EAuCvCjB,GAAmB,GAvCoB,IAuC/FkB,gBAvC+F,MAuCpF,GAvCoF,MAuChFjD,sBAvCgF,MAuC/D,GAvC+D,MAuC3D8C,kBAvC2D,MAuC9C,GAvC8C,EAyCvG,OACI,kBAACtB,EAAD,KACI,yBAAKpD,UAAU,qBACX,4BAAQA,UAAU,UAAUC,QAAS,WAAQuD,MAA7C,QAA+E,4BAAQxD,UAAU,UAAUC,QAAS,WAAQqD,MAA7C,iBAElFQ,EAAW,kBAAC,EAAD,CAAQ3C,aAAcA,IAC9B,yBAAKnB,UAAU,0BACX,yBAAKA,UAAU,iBAAf,mBAA4CyD,EAAoB,EAAhE,eAAwEF,EAAc1B,SACtF,yBAAK7B,UAAU,sBACX,wBAAIA,UAAU,YAAY6E,GAC1B,wBAAI7E,UAAU,iBACT0E,EAAW/D,KAAI,SAACmE,EAAcZ,GAAf,OACZ,wBAAIlE,UAAW8E,IAASlD,EAAiB,sBAAwB,eAAgBZ,IAAK8D,EAAM7E,QAAS,kBA5BtG,SAACc,GACxB,IAAMgE,EAAY5D,EAAaR,KAAI,SAACe,EAAWwC,GAC3C,OAAIA,IAAUT,GACVG,EAAmB,eAAKlC,EAAN,CAAYE,eAAgBb,KACvC,eAAKW,EAAZ,CAAkBE,eAAgBb,KAE/BW,KAEXmC,EAAgBkB,GAoBmHC,CAAmBF,KAC1H,2BAAOlE,KAAK,QAAQqE,QAASH,IAASlD,EAAgBzC,MAAO2F,EAAMjE,KAAI,UAAKqD,EAAL,UAAoBgB,GAAE,UAAKhB,EAAL,YAC7F,2BAAOiB,QAAO,UAAKjB,EAAL,YAnBzBnD,EAmB0D+D,GAlBpE,IAAIM,WAAYC,gBAAgBtE,EAAM,aAAauE,KAAKC,aAD/C,IAACxE,OAwBL,yBAAKf,UAAU,oBACY,IAAtByD,GAA2B,4BAAQxD,QAAS,WAAQ0E,EAAqBlB,EAAoB,KAAlE,aAC3BA,IAAuBF,EAAc1B,OAAS,EAAK,4BAAQ5B,QAAS,WAAQ0E,EAAqBlB,EAAoB,KAAlE,QAAwF,4BAAQxD,QAAS,WAAQ8D,GAAY,KAArC,c,izCCzOpK,IAAMyB,EAAuBlG,IAAOC,IAAV,KA6GXkG,EA/CkC,SAAC,GAAwB,IAAtB1F,EAAqB,EAArBA,eAAqB,EAC/BqB,mBAA0B,IADK,mBAC9DsE,EAD8D,KACjDC,EADiD,KAWrE,OARApE,qBAAU,WACN,IAAMO,EAAUC,aAAaC,QAAQ,eACrC,GAAIF,EAAS,CACT,IAAM8D,EAAezD,KAAKC,MAAMN,GAChC6D,EAAeC,MAEpB,IAGC,kBAACJ,EAAD,KACI,yBAAKxF,UAAU,eACX,4BAAQC,QAAS,WAAQF,GAAe,KAAxC,SAEJ,4CACA,+BACI,+BACI,4BACI,oCACA,+CACA,+CACA,iDACA,4CAGR,+BACK2F,GAAeA,EAAY7D,OAAS,EAAI6D,EAAY/E,KAAI,SAACkF,EAAM3B,GAAW,IAAD,EACQ2B,GAAQ,GADhB,IAC9DxD,YAD8D,MACvD,GADuD,EACnDE,EADmD,EACnDA,eAAgBC,EADmC,EACnCA,QAASC,EAD0B,EAC1BA,UAAWR,EADe,EACfA,QADe,EACN6D,KAChE,OACI,wBAAI9E,IAAKkD,GACL,4BAAK7B,GACL,4BAAKE,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKR,EAAL,SAGN,4BAAI,wBAAI8D,QAAS,GAAb,gC,+ZChG9B,IAAMC,EAAe1G,IAAOC,IAAV,KA6GH0G,MAvEf,WAAgB,IAAD,EAC6B7E,mBAA0B,IADvD,mBACNmC,EADM,KACS2C,EADT,OAEyB9E,oBAAS,GAFlC,mBAEN+E,EAFM,KAEOpG,EAFP,OAGiBqB,oBAAS,GAH1B,mBAGNgF,EAHM,KAGGC,EAHH,OAI2CjF,mBAAS,IAJpD,mBAINkF,EAJM,KAIgBC,EAJhB,KAMPzG,EAAkB,SAACiB,GACvBsF,GAAW,GACXE,EAAwBxF,GACxByF,IACGC,IADH,qCACqCC,EAAgB3F,KAClD4F,MAAK,SAAAC,GAAG,OAAIA,EAAI7F,QAChB4F,MAAK,SAAA5F,GAAS,IAAD,GACaA,GAAQ,IAAzB8F,eADI,MACM,GADN,EAENC,EACJD,IACO,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAAShF,QAAS,GAClBgF,EAAQlG,KAAI,SAACmE,GAAD,sBACPA,EADO,CAEVlD,eAAgB,GAChBiD,UAAU,IAAIO,WAAYC,gBACxBP,EAAKD,SACL,aACAS,KAAKC,eAEXW,EAAiBY,GACjBT,GAAW,OAGXK,EAAkB,SAACK,GAEvB,IAAMC,EAAW,GAIjB,OAHAvG,OAAOC,KAAKqG,GAAKpG,KAAI,SAAAsG,GAAC,OACpBD,EAAIE,KAAJ,UAAYC,mBAAmBF,GAA/B,YAAqCE,mBAAmBJ,EAAIE,SAExD,IAAN,OAAWD,EAAII,KAAK,OAWtB,OACE,kBAACpB,EAAD,CAAchG,UAAU,OACtB,wBAAIA,UAAU,SAAd,cACCoG,GAAW,kEACVA,IAAYD,GACZ,oCACG5C,GAAiBA,EAAc1B,OAAS,EACvC,kBAAC,EAAD,CACE2B,gBAZY,WACtB0C,EAAiB,IACjBK,EAAwB,KAWdhD,cAAeA,EACfD,cAlBU,WACpB4C,EAAiB,IACjBpG,EAAgBwG,MAmBR,kBAAC,EAAD,CACEvG,eAAgBA,EAChBD,gBAAiBA,KAKxBqG,GAAe,kBAAC,EAAD,CAAapG,eAAgBA,MCpG/BsH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d1da1e0.chunk.js","sourcesContent":["export const CATEGORY_TYPE = [\n  { label: 'Any Category', value: '' },\n  { label: 'General Knowledge', value: '9' },\n  { label: 'Entertainment: Books', value: '10' },\n  { label: 'Entertainment: Film', value: '11' },\n  { label: 'Entertainment: Music', value: '12' },\n  { label: 'Entertainment: Musicals & Theatres', value: '13' },\n  { label: 'Entertainment: Television', value: '14' },\n  { label: 'Entertainment: Video Games', value: '15' },\n  { label: 'Entertainment: Board Games', value: '16' },\n  { label: 'Science & Nature', value: '17' },\n  { label: 'Science: Computers', value: '18' },\n  { label: 'Science: Mathematics', value: '19' },\n  { label: 'Mythology', value: '20' },\n  { label: 'Sports', value: '21' },\n  { label: 'Geography', value: '22' },\n  { label: 'History', value: '23' },\n  { label: 'Politics', value: '24' },\n  { label: 'Art', value: '25' },\n  { label: 'Celebrities', value: '26' },\n  { label: 'Animals', value: '27' },\n  { label: 'Vehicles', value: '28' },\n  { label: 'Entertainment: Comics', value: '29' },\n  { label: 'Science: Gadgets', value: '30' },\n  { label: 'Entertainment: Japanese Anime & Manga', value: '31' },\n  { label: 'Entertainment: Cartoon & Animations', value: '32' }\n];\n\nexport const DIFFICULTY = [\n  { label: 'Any Difficulty', value: '' },\n  { label: 'Easy', value: 'easy' },\n  { label: 'Medium', value: 'medium' },\n  { label: 'Hard', value: 'hard' }\n];\n\nexport const QUESTION_TYPE = [\n  { label: 'Any Type', value: '' },\n  { label: 'Multiple Choice', value: 'multiple' },\n  { label: 'True / False', value: 'boolean' }\n];\n","import { ErrorMessage, Field, Form, Formik } from 'formik';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { QueryStringProps } from '../../App';\nimport { CATEGORY_TYPE, DIFFICULTY } from '../../constants';\n\nconst HomeContainer = styled.div`\n    width: 50%;\n    margin: auto;\n    form {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        background: #FFF;\n        padding: 32px;\n        border-radius: 10px;\n        .form-row {\n            display: flex;\n            flex-direction: column;\n            align-items: baseline;\n            padding: 12px;\n            label {\n                span {\n                    font-size: 10px;\n                    color: #9c8b8b;\n                }\n                display: inline-block;\n                max-width: 100%;\n                margin-bottom: 5px;\n                font-weight: bold;\n            }\n            select, input {\n                width: 600px;\n                height: 38px;\n                display: block;\n                padding: 8px;\n                font-size: 15px;\n                line-height: 1.42857143;\n                color: #464545;\n                background-color: #ffffff;\n                background-image: none;\n                border: 1px solid #CCC;\n                border-radius: 4px;\n                box-shadow: inset 0 1px 1px rgba(0,0,0,0.075);\n                transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;\n            }\n            input {\n                width: 577px;\n                height: 22px;\n            }\n        }\n        button {\n            border-width: 0px;\n            text-transform: uppercase;\n            font-weight: 700;\n            font-size: 16px;\n            padding: 12px;\n            border-radius: 10px;\n            cursor: pointer;\n            background: rgba(0,0,0,0.6);\n            color: #FFF;\n            margin-top: 19px;\n            outline: none;\n            &:hover {\n                background: #2b282899;\n            }\n        }\n    }\n    .restart-container {\n        width: 100%;\n        margin: auto;\n        text-align: right;\n        .restart {\n            background: transparent;\n            border: none;\n            font-size: 16px;\n            color: #4444d5;\n            cursor: pointer;\n            margin-bottom: 8px;\n            outline: none;\n        }\n    }\n    @media screen and (max-width: 1024px) {\n        width: 70%;\n        .restart-container {\n            width: 100%\n        }\n        form {\n            padding: 20px 10px;\n            .form-row {\n                width: 100%;\n                padding: 6px;\n                select {\n                    width: 100%;\n                }\n                input {\n                    width: 97%\n                }\n            }\n        }\n    }\n    @media screen and (max-width: 700px) {\n        width: 100%;\n        .restart-container {\n            width: 100%\n        }\n\t\tform {\n            padding: 20px 10px;\n            .form-row {\n                width: 100%;\n                select, input {\n                    width: 100%;\n                }\n                input {\n                    width: 97%\n                }\n            }\n        }\n    }\n    \n`;\nconst validate = (val: any) => {\n    const errors: any = {};\n    if (!val.amount) errors.amount = 'Required';\n    if (val.amount <= 0) errors.amount = 'Valid input should be more than 1';\n    if (isNaN(val.amount)) errors.amount = 'Please enter the valid input';\n    return errors;\n};\n\ninterface IHomeProps {\n    handleStartQuiz: (data: QueryStringProps) => void;\n    setShowHistory: (data: boolean) => void;\n}\nconst Home: React.FC<IHomeProps> = ({ handleStartQuiz, setShowHistory }) => {\n    return (\n        <HomeContainer>\n            <div className='restart-container'>\n                <button className='restart' onClick={() => { setShowHistory(true) }}>Show History</button>\n            </div>\n            <Formik\n                initialValues={{ category: '', difficulty: '', amount: 10 }}\n                validate={validate}\n                onSubmit={(values: any, actions) => {\n                    const filterJson = { ...values }\n                    Object.keys(values).map((val) => {\n                        if (!filterJson[val])\n                            delete filterJson[val];\n                        return val;\n                    })\n                    handleStartQuiz(filterJson);\n                }}\n            >\n                {({ errors }) => (\n                    <Form>\n                        <div className='form-row'>\n                            <label>Number of Questions: </label>\n                            <Field type=\"number\" name=\"amount\" />\n                            <ErrorMessage name='amount' />\n                        </div>\n                        <div className='form-row'>\n                            <label>Select Category: <span>(Optional)</span></label>\n                            <Field as=\"select\" name=\"category\">\n                                {CATEGORY_TYPE.map((data) => {\n                                    const { label, value } = data || {};\n                                    return <option key={value} value={value}>{label}</option>\n                                })}\n                            </Field>\n                        </div>\n                        <div className='form-row'>\n                            <label>Select Difficulty: <span>(Optional)</span></label>\n                            <Field as=\"select\" name=\"difficulty\">\n                                {DIFFICULTY.map((data) => {\n                                    const { label, value } = data || {};\n                                    return <option key={value} value={value}>{label}</option>\n                                })}\n                            </Field>\n                        </div>\n                        {/* <div className='form-row'>\n                            <label>Select Type: <span>(Optional)</span></label>\n                            <Field as=\"select\" name=\"type\">\n                                {QUESTION_TYPE.map((data) => {\n                                    const { label, value } = data || {};\n                                    return <option key={value} value={value}>{label}</option>\n                                })}\n                            </Field>\n                        </div> */}\n                        <button type=\"submit\">Start Quiz</button>\n                    </Form>\n                )}\n            </Formik>\n        </HomeContainer>\n    )\n}\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { QuestionProps } from '../../App';\n\nconst ResultContainer = styled.div`\n    .result-container {\n        .row{\n            display: flex;\n            flex-direction: revert;\n            justify-content: center;\n            font-size: 20px;\n        }\n    }\n    .percent {\n        font-size: 17px;\n        font-weight: 700;\n        padding: 26px;\n    }\n`;\n\ninterface IResultProps {\n    allQuestions: QuestionProps[];\n}\nconst Result: React.FC<IResultProps> = ({ allQuestions }) => {\n    const [correctAnswer, setCorrectAnswer] = useState<number>(0);\n    useEffect(() => {\n        const answer = allQuestions.filter((aVal: any) => {\n            const { correct_answer, selectedAnswer } = aVal || {};\n            return correct_answer === selectedAnswer;\n        });\n        setCorrectAnswer(answer.length);\n        let history = localStorage.getItem('quizHistory');\n        const percent = (answer.length / allQuestions.length) * 100;\n        if (history) {\n            let parseJson = JSON.parse(history);\n            parseJson = [...parseJson, {\n                date: getTodayDate(),\n                totalQuestions: allQuestions.length,\n                correct: answer.length,\n                inCorrect: allQuestions.length - answer.length,\n                percent\n            }];\n            localStorage.setItem('quizHistory', JSON.stringify(parseJson));\n        } else {\n            const stringJson = [{\n                date: getTodayDate(),\n                totalQuestions: allQuestions.length,\n                correct: answer.length,\n                inCorrect: allQuestions.length - answer.length,\n                percent\n            }]\n            localStorage.setItem('quizHistory', JSON.stringify(stringJson));\n        }\n    }, [allQuestions]);\n\n    const getTodayDate = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        return dd + '-' + mm + '-' + yyyy;\n    }\n    return (\n        <ResultContainer>\n            <h2>Result</h2>\n            <div className='result-container'>\n                <div className='row'>\n                    <div className='row-label'>Correct Answer: </div><div className='row-value'>{correctAnswer}</div>\n                </div>\n                <div className='row'>\n                    <div className='row-label'>InCorrect Answer: </div><div className='row-value'>{allQuestions.length - correctAnswer}</div>\n                </div>\n            </div>\n            <div className='percent'>{(correctAnswer / allQuestions.length) * 100}% of Questions are Correct</div>\n        </ResultContainer>\n    )\n}\n\nexport default Result;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { QuestionProps } from '../../App';\nimport Result from '../Result/Result';\n\nconst QuestionListContainer = styled.div`\n    .restart-container {\n        width: 50%;\n        margin: auto;\n        text-align: right;\n        display: flex;\n        justify-content: space-between;\n        .restart {\n            background: transparent;\n            border: none;\n            font-size: 16px;\n            color: #4444d5;\n            cursor: pointer;\n            margin-bottom: 8px;\n            outline: none;\n        }\n    }\n    .question-container-top {\n        position: relative;\n        max-width: 50%;\n        margin: 0 auto;\n        background: #fff;\n        border-radius: 3px;\n        .questionCount {\n            padding: 1.5rem 2.5rem 0;\n            font-size: 14px;\n            text-align: left;\n            padding-left: 19px;\n        }\n        .question-container {\n            .question {\n                font-size: 20px;\n                text-align: left;\n                padding-left: 19px;\n                margin: 11px 20px 11px 0px;\n            }\n            .answerOptions {\n                padding: 0;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                margin: 10px 14px;\n                .answerOption {\n                    cursor: pointer;\n                    padding: 21px 0;\n                    font-size: 16px;\n                    border-top: 1px solid #eee;\n                    list-style: none;\n                    width: 100%;\n                    font-weight: 500;\n                    text-align: left;\n                    padding-left: 19px;\n                    display: flex;\n                    flex-direction: revert;\n                    align-items: center;\n                    text-transform: capitalize;\n                    &:hover {\n                        background: #eefbfe;\n                    }\n                    label {\n                        cursor: pointer;\n                    }\n                    input[type='radio'] {\n                        cursor: pointer;\n                        margin-right: 15px;\n                        bottom: 3px;\n                        position: relative;\n                        &:after {\n                            width: 20px;\n                            height: 20px;\n                            border-radius: 15px;\n                            top: -4px;\n                            left: -1px;\n                            position: relative;\n                            background-color: #d1d3d1;\n                            content: '';\n                            display: inline-block;\n                            visibility: visible;\n                            border: 2px solid white;\n                        }\n                        &:checked:after {\n                            width: 20px;\n                            height: 20px;\n                            border-radius: 15px;\n                            top: -4px;\n                            left: -1px;\n                            position: relative;\n                            background-color: #2f65db;\n                            content: '';\n                            display: inline-block;\n                            visibility: visible;\n                            border: 2px solid white;\n                        }\n                    }\n                }\n            }\n        }\n        .button-container {\n            display: flex;\n            flex-direction: row;\n            justify-content: space-between;\n            padding: 15px;\n            button {\n                padding: 15px;\n                cursor: pointer;\n                border: none;\n                outline: none;\n                font-size: 17px;\n                border-radius: 10px;\n            }\n        }\n    }\n    @media screen and (max-width: 1024px) {\n        .restart-container {\n            width: 70%\n        }\n        .question-container-top {\n            max-width: 70%;\n            .question-container {\n                .question {\n                    font-size: 16px;\n                }\n                .answerOptions {\n                    .answerOption {\n                        padding: 11px 0;\n                        font-size: 14px;\n                    }\n                }\n            }\n            .button-container {\n                padding: 0px 25px 13px 25px;\n                button {\n                    padding: 6px 15px;\n                }\n            }\n        }\n    }\n    @media screen and (max-width: 700px) {\n        .restart-container {\n            width: 100%\n        }\n        .question-container-top {\n            max-width: 100%;\n            .question-container {\n                .question {\n                    font-size: 12px;\n                }\n                .answerOptions {\n                    .answerOption {\n                        padding: 11px 0;\n                        font-size: 10px;\n                    }\n                }\n            }\n            .button-container {\n                padding: 0px 25px 6px 25px;\n                button {\n                    padding: 6px 15px;\n                }\n            }\n        }\n    }\n`;\ninterface IQuizQuestionsProps {\n    quizQuestions: QuestionProps[];\n    handleClickHome: () => void;\n    handleRestart: () => void;\n}\n\nconst QuestionList: React.FC<IQuizQuestionsProps> = ({ handleRestart, quizQuestions, handleClickHome }) => {\n    const [currentQuestionNo, setCurrentQuestionNo] = useState<number>(0);\n    const [currentQuestion, setCurrentQuestion] = useState<QuestionProps>();\n    const [allQuestions, setAllQuestions] = useState<any>([]);\n    const [isSubmit, setIsSubmit] = useState<boolean>(false);\n\n    useEffect(() => {\n        if (quizQuestions && quizQuestions.length) {\n            const allOptionJson = quizQuestions.map((qVal, index) => {\n                const { incorrect_answers = [], correct_answer } = qVal || {};\n                const allAns = [...incorrect_answers];\n                const randomValue = Math.floor(Math.random() * (allAns.length - 0 + 1)) + 0;\n                allAns.splice(randomValue, 0, correct_answer);\n                return { ...qVal, allOptions: allAns }\n            });\n            setAllQuestions(allOptionJson);\n            setCurrentQuestion(allOptionJson[0]);\n        }\n    }, [quizQuestions]);\n\n    const handleChangeQuestion = (num: number) => {\n        setCurrentQuestionNo(num);\n        setCurrentQuestion(allQuestions[num]);\n    };\n\n    const handleSelectAnswer = (data: string) => {\n        const setAnswer = allQuestions.map((aVal: any, index: any) => {\n            if (index === currentQuestionNo) {\n                setCurrentQuestion({ ...aVal, selectedAnswer: data });\n                return { ...aVal, selectedAnswer: data }\n            }\n            return aVal;\n        })\n        setAllQuestions(setAnswer);\n    }\n\n    const decodeValue = (data: string) => {\n        return new DOMParser().parseFromString(data, \"text/html\").body.innerHTML;\n    }\n    const { question = '', selectedAnswer = '', allOptions = [] } = currentQuestion || {};\n\n    return (\n        <QuestionListContainer>\n            <div className='restart-container'>\n                <button className='restart' onClick={() => { handleClickHome() }}>Home</button><button className='restart' onClick={() => { handleRestart() }}>Restart Quiz</button>\n            </div>\n            {isSubmit ? <Result allQuestions={allQuestions} /> :\n                <div className='question-container-top'>\n                    <div className='questionCount'>{`Question ${currentQuestionNo + 1} of ${quizQuestions.length}`}</div>\n                    <div className='question-container'>\n                        <h2 className='question'>{question}</h2>\n                        <ul className='answerOptions'>\n                            {allOptions.map((rVal: string, index: number) => (\n                                <li className={rVal === selectedAnswer ? 'active answerOption' : 'answerOption'} key={rVal} onClick={() => handleSelectAnswer(rVal)}>\n                                    <input type='radio' checked={rVal === selectedAnswer} value={rVal} name={`${index}-radio`} id={`${index}-radio`} />\n                                    <label htmlFor={`${index}-radio`}>{decodeValue(rVal)}</label>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                    <div className='button-container'>\n                        {currentQuestionNo !== 0 && <button onClick={() => { handleChangeQuestion(currentQuestionNo - 1) }}> Previous</button>}\n                        {currentQuestionNo !== (quizQuestions.length - 1) ? <button onClick={() => { handleChangeQuestion(currentQuestionNo + 1) }}>Next</button> : <button onClick={() => { setIsSubmit(true) }}>Submit</button>}\n                    </div>\n                </div>}\n        </QuestionListContainer>\n    )\n}\n\nexport default QuestionList;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst QuizHistoryContainer = styled.div`\n    table {\n        font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n        border-collapse: collapse;\n        width: 100%;\n        td, th {\n            border: 1px solid #ddd;\n            padding: 8px;\n        }\n        th {\n            padding-top: 12px;\n            padding-bottom: 12px;\n            text-align: left;\n            background-color: #4CAF50;\n            color: white;\n            text-align: center;\n        }\n        @media screen and (max-width: 700px) {\n           th {\n               font-size: 14px;\n           }\n        }\n        tr{\n            &:nth-child(even){\n                background-color: #f2f2f2;\n            }\n            &:nth-child(odd){\n                background-color: #b0a5b0;\n            }\n            &:hover {\n                background-color: #eefbfe;\n            }\n        }\n    }\n    .back-button {\n        display: flex;\n        flex-direction: revert;\n        justify-content: end;\n        padding-left: 12px;\n        padding-bottom: 14px;\n        button {\n            background: transparent;\n            border: none;\n            font-size: 16px;\n            color: #4444d5;\n            cursor: pointer;\n            outline: none;\n        }\n    }\n`;\n\ninterface IHistoryProps {\n    date: string,\n    totalQuestions: number,\n    correct: number,\n    inCorrect: number,\n    percent: any,\n    time: string\n}\ninterface IQuizHistoryProps {\n    setShowHistory: (value: boolean) => void;\n}\nconst QuizHistory: React.FC<IQuizHistoryProps> = ({ setShowHistory }) => {\n    const [historyData, setHistoryData] = useState<IHistoryProps[]>([]);\n\n    useEffect(() => {\n        const history = localStorage.getItem('quizHistory');\n        if (history) {\n            const parseHistory = JSON.parse(history);\n            setHistoryData(parseHistory);\n        }\n    }, []);\n\n    return (\n        <QuizHistoryContainer>\n            <div className='back-button'>\n                <button onClick={() => { setShowHistory(false) }}>Back</button>\n            </div>\n            <h2>Quiz History</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Total Questions</th>\n                        <th>Correct Answers</th>\n                        <th>Incorrect Answers</th>\n                        <th>Percentage</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {historyData && historyData.length > 0 ? historyData.map((hVal, index) => {\n                        const { date = '', totalQuestions, correct, inCorrect, percent, time = '' } = hVal || {};\n                        return (\n                            <tr key={index}>\n                                <td>{date}</td>\n                                <td>{totalQuestions}</td>\n                                <td>{correct}</td>\n                                <td>{inCorrect}</td>\n                                <td>{percent}%</td>\n                            </tr>\n                        )\n                    }) : (<tr><td colSpan={5}>No Quiz History Found..</td></tr>)}\n                </tbody>\n            </table>\n\n        </QuizHistoryContainer>\n    )\n}\n\nexport default QuizHistory;","import axios from 'axios';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport Home from './components/Home/Home';\nimport QuestionList from './components/QuestionList/QuestionList';\nimport QuizHistory from './components/QuizHistory/QuizHistory';\n\nconst AppContainer = styled.div`\n  .title {\n    background-color: #222;\n    padding: 20px;\n    color: #fff;\n    text-align: center;\n    margin: 0;\n    margin-bottom: 81px;\n  }\n  @media screen and (max-width: 1024px) {\n    .title {\n      margin-bottom: 20px;\n    }\n  }\n  @media screen and (max-width: 700px) {\n    .title {\n      margin-bottom: 15px;\n    }\n  }\n`;\n\nexport interface QueryStringProps {\n  category?: string;\n  difficulty?: string;\n  type?: string;\n}\n\nexport interface QuestionProps {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: any;\n  question: string;\n  type: string;\n  selectedAnswer?: string;\n  allOptions: any;\n}\n\nfunction App() {\n  const [quizQuestions, setQuizQuestions] = useState<QuestionProps[]>([]);\n  const [showHistory, setShowHistory] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [currentConfiguration, setCurrentConfiguration] = useState({});\n\n  const handleStartQuiz = (data: QueryStringProps) => {\n    setLoading(true);\n    setCurrentConfiguration(data);\n    axios\n      .get(`https://opentdb.com/api.php${obj2QueryString(data)}`)\n      .then(res => res.data)\n      .then(data => {\n        const { results = [] } = data || {};\n        const addedKey =\n          results &&\n          results?.length > 0 &&\n          results.map((rVal: any) => ({\n            ...rVal,\n            selectedAnswer: '',\n            question: new DOMParser().parseFromString(\n              rVal.question,\n              'text/html'\n            ).body.innerHTML\n          }));\n        setQuizQuestions(addedKey);\n        setLoading(false);\n      });\n  };\n  const obj2QueryString = (obj: any) => {\n    //convert object to querystring\n    const str: any = [];\n    Object.keys(obj).map(k =>\n      str.push(`${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`)\n    );\n    return `?${str.join('&')}`;\n  };\n\n  const handleRestart = () => {\n    setQuizQuestions([]);\n    handleStartQuiz(currentConfiguration);\n  };\n  const handleClickHome = () => {\n    setQuizQuestions([]);\n    setCurrentConfiguration({});\n  };\n  return (\n    <AppContainer className=\"App\">\n      <h2 className=\"title\">React Quiz</h2>\n      {loading && <p>Please Wait.. Loading Questions...</p>}\n      {!loading && !showHistory && (\n        <>\n          {quizQuestions && quizQuestions.length > 0 ? (\n            <QuestionList\n              handleClickHome={handleClickHome}\n              quizQuestions={quizQuestions}\n              handleRestart={handleRestart}\n            />\n          ) : (\n            <Home\n              setShowHistory={setShowHistory}\n              handleStartQuiz={handleStartQuiz}\n            />\n          )}\n        </>\n      )}\n      {showHistory && <QuizHistory setShowHistory={setShowHistory} />}\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}